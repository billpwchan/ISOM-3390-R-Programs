mapply(trimmedMean, list.random, MoreArgs = list(s = histx$counts[1], l = histx$counts[length(histx)]))
#mapply(trimmedMean, list.random, histx$counts[1], histx$counts[length(histx)])  #Same Ans.
strikes.df <- read.csv("https://drive.google.com/uc?export=download&id=1nT40HPs_OTUqELnlVzjNTaxpOJf8VdYs")
dim(strikes.df)
summary(strikes.df)
# Insert your code here
strikes.by.country <- split(strikes.df, strikes.df$country)
head(strikes.by.country$Canada, 5)
# Insert your code here
newMean <- function(x) {
mean(x$unemployment)
}
sapply(strikes.by.country, newMean)
# Insert your code here
newerMean <- function(x) {
return(list(Avg.UR = mean(x$unemployment), Avg.IR = mean(x$inflation), Avg.SV = mean(x$strike.volume)))
}
sapply(strikes.by.country, newerMean)
default.data <- read.csv("https://drive.google.com/uc?export=download&id=1iTmjYcOf7cmnQz76Rart9ZbJGrhl7QXk")
set.seed(1)
#######################
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
str(default.data)
#######################
# Insert your code here
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
str(fold)
str(x)
tapply(default.data, fold, function(x) {
str(x)
})
tapply(default.data[], fold, function(x) {
str(x)
})
tapply(1:nrow(default.data), fold, function(x) {
str(x)
})
str(fold)
tapply(1:nrow(default.data), fold, function(x) {
str(x)
})
tapply(1:nrow(default.data), fold, function(x) {
glm(default ~ student + balance, family = binomial, data = default.data[-x,])
})
default.data <- read.csv("https://drive.google.com/uc?export=download&id=1iTmjYcOf7cmnQz76Rart9ZbJGrhl7QXk")
set.seed(1)
#######################
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
str(logistic.fig[[i]])
default.data <- read.csv("https://drive.google.com/uc?export=download&id=1iTmjYcOf7cmnQz76Rart9ZbJGrhl7QXk")
set.seed(1)
#######################
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
str(logistic.fig[[1]])
default.data <- read.csv("https://drive.google.com/uc?export=download&id=1iTmjYcOf7cmnQz76Rart9ZbJGrhl7QXk")
set.seed(1)
#######################
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
str(logistic.fit[[1]])
#######################
default.data <- read.csv("https://drive.google.com/uc?export=download&id=1iTmjYcOf7cmnQz76Rart9ZbJGrhl7QXk")
set.seed(1)
#######################
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
str(logistic.fit[1])
#######################
default.data <- read.csv("https://drive.google.com/uc?export=download&id=1iTmjYcOf7cmnQz76Rart9ZbJGrhl7QXk")
set.seed(1)
#######################
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
print(logistic.fit[1])
#######################
default.data <- read.csv("https://drive.google.com/uc?export=download&id=1iTmjYcOf7cmnQz76Rart9ZbJGrhl7QXk")
set.seed(1)
#######################
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
print(logistic.fit[1])
#######################
# Insert your code here
str(fold)
tapply(1:nrow(default.data), fold, function(x) {
glm(default ~ student + balance, family = binomial, data = default.data[-x,])
})
str(fold)
logistic.fit <- tapply(1:nrow(default.data), fold, function(x) {
glm(default ~ student + balance, family = binomial, data = default.data[-x,])
})
print(logistic.fit)
str(fold)
logistic.fit <- tapply(1:nrow(default.data), fold, function(x) {
temp <- glm(default ~ student + balance, family = binomial, data = default.data[-x,])
predict(temp, default.data[x,], type="response")
})
print(logistic.fit)
print(logistic.prob)
str(result)
partition <- (1:nrow(default.data)) %% 10 + 1 # k = 10
fold <- sample(partition, length(partition))
logistic.fit <- vector("list", 10)
logistic.prob <- vector("numeric", 10000)
for (i in 1:10) {
logistic.fit[[i]] <- glm(default ~ student + balance, family = binomial, data = default.data[fold!= i,])
logistic.prob[fold == i] <- predict(logistic.fit[[i]], default.data[fold==i, ],  type="response")
}
str(logistic.prob)
#######################
str(logistic.prob)
str(fold)
result <- tapply(1:nrow(default.data), fold, function(x) {
temp <- glm(default ~ student + balance, family = binomial, data = default.data[-x,])
predict(temp, default.data[x,], type="response")
})
str(result)
str(unlist(result))
str(result)
str(result[[9]])
str(result[[9]][1])
str(result)
# Insert your code here
str(fold)
logistic.prob1 <- vector("numeric", 10000)
result <- tapply(1:nrow(default.data), fold, function(x) {
temp <- glm(default ~ student + balance, family = binomial, data = default.data[-x,])
logistic.prob1[x] <- predict(temp, default.data[x,], type="response")
return(logistic.prob1[x])
})
str(logistic.prob1)
# Insert your code here
str(fold)
result <- tapply(1:nrow(default.data), fold, function(x) {
temp <- glm(default ~ student + balance, family = binomial, data = default.data[-x,])
predict(temp, default.data[x,], type="response")
})
str(logistic.prob1)
# Insert your code here
str(fold)
result <- tapply(1:nrow(default.data), fold, function(x) {
temp <- glm(default ~ student + balance, family = binomial, data = default.data[-x,])
predict(temp, default.data[x,], type="response")
})
str(result)
# Insert your code here
str(fold)
result <- tapply(1:nrow(default.data), fold, function(x) {
temp <- glm(default ~ student + balance, family = binomial, data = default.data[-x,])
predict(temp, default.data[x,], type="response")
})
str(result)
# Insert your code here
result <- tapply(1:nrow(default.data), fold, function(x) {
temp <- glm(default ~ student + balance, family = binomial, data = default.data[-x,])
predict(temp, default.data[x,], type="response")
})
str(result)
knitr::opts_chunk$set(echo = TRUE)
strikes.df <- read.csv("https://drive.google.com/uc?export=download&id=1nT40HPs_OTUqELnlVzjNTaxpOJf8VdYs")
dim(strikes.df)
summary(strikes.df)
# Insert your code here
strikes.by.country <- split(strikes.df, strikes.df$country)
head(strikes.by.country$Canada, 5)
strikes.df <- read.csv("https://drive.google.com/uc?export=download&id=1nT40HPs_OTUqELnlVzjNTaxpOJf8VdYs")
dim(strikes.df)
str(strikes.df)
strikes.df <- read.csv("https://drive.google.com/uc?export=download&id=1nT40HPs_OTUqELnlVzjNTaxpOJf8VdYs")
dim(strikes.df)
print(strikes.df)
strikes.df <- read.csv("https://drive.google.com/uc?export=download&id=1nT40HPs_OTUqELnlVzjNTaxpOJf8VdYs")
dim(strikes.df)
summary(strikes.df)
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 100)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength != length(x) + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 100)
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 2)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength <= 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 4)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength <= 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 5)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength <= 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 7)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength <= 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 5)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength <= 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 3)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength <= 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 2)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength < 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 2)
trimmedMean(c(1,7,3,2,5,0.5, 9, 10))
, 1, 2
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength < 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 2)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength < 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10))
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength < 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 0, 2)
# here's a function skeleton to get you started
# fill me in with an informative comment
# describing what the function does
trimmedMean <- function(x, s = 0, l = 0) {
i = 0
oriLength = length(x)
while (i < s) {
x = x[x!=min(x)]
i = i + 1
}
i = 0
while (i < l) {
x = x[x!=max(x)]
i = i + 1
}
if (oriLength < 1 + s + l) {
message("This Vector can't be trimmed as requested")
} else {
return(x)
}
# Insert your code here
}
trimmedMean(c(1,7,3,2,5,0.5, 9, 10), 1, 2)
# Insert your code here
mapply(trimmedMean, list.random, MoreArgs = list(s = histx$counts[1], l = histx$counts[length(histx)]))
#mapply(trimmedMean, list.random, histx$counts[1], histx$counts[length(histx)])  #Same Ans.
# Insert your code here
strikes.by.country <- split(strikes.df, strikes.df$country)
head(strikes.by.country$Canada, 5)
# Insert your code here
strikes.by.country <- split(strikes.df, strikes.df$country)
head(strikes.by.country$Canada, 10)
# Insert your code here
strikes.by.country <- split(strikes.df, strikes.df$country)
head(strikes.by.country$Canada, 5)
